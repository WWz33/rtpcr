lm0 <- stats::lm(stats::as.formula(paste("wDCt ~", CRDfactors,  "+ block")), x)
factorialANOVA <- stats::anova(lm0)
factorialANOVA
# If ANOVA based on factorial design was desired with blocking factor:
lm0 <- stats::lm(stats::as.formula(paste("wDCt ~",  "+ block", CRDfactors)), x)
factorialANOVA <- stats::anova(lm0)
factorialANOVA
factorialANOVA
# Concatenate the columns using paste0
x$T <- do.call(paste, c(x[1:(ncol(x)-7)], sep = ":"))
x$T
x
lm <- stats::lm(wDCt ~ block + T, x)
anovaCRD <- stats::anova(lm)
anovaCRD
x
# Reverse ordering of the grouping letters
invOrder <- function(invg){
collapsed <- paste(invg,sep="", collapse = "")
u <- unique(strsplit(collapsed, "")[[1]])
if(length(u) < 2){
return( invg)
}
u <- u[order(u)]
m <- matrix(nrow = NROW(invg), ncol=length(u))
m[] <-F
for(i in 1:length( invg)){
s <- strsplit( invg[i],"")[[1]]
index <- match(s, u)
m[i, index] <- T
}
for(i in 1:(length(u) - 1)){
firstColT <- match(T, m[, i])[1]
firstT <- match(T, rowSums(m[, i:length(u)] > 0))[1]
if(firstT < firstColT){
colT <- match(T, m[firstT, i:length(u)])[1]
colT <- colT + i - 1
tmp <- m[, colT]
m[, colT] <- m[,i]
m[, i] <- tmp
}
}
res <- vector(mode = "character", length = length("trt"))
for(i in 1:length(invg)){
l <- u[m[i, ]]
res[i] <- paste(l, sep = "",collapse = "")
}
return(res)
}
# Preparing final result table including letter grouping of the means
g <- LSD.test(lm, "T", group = T, console = F, alpha = 0.05, p.adj = p.adj)$groups
library(agricolae)
# Preparing final result table including letter grouping of the means
g <- LSD.test(lm, "T", group = T, console = F, alpha = 0.05, p.adj = p.adj)$groups
qpcrANOVA <- function(x,
NumberOfrefGenes = 1,
Block = NULL,
p.adj = c("none","holm","hommel", "hochberg", "bonferroni", "BH", "BY", "fdr")){
# Check if there is block
if (is.null(Block)) {
if(NumberOfrefGenes == 1) {
factors <- colnames(x)[1:(ncol(x)-5)]
CRDfactors <- paste(factors, collapse = "*")
colnames(x)[ncol(x)-4] <- "rep"
colnames(x)[ncol(x)-3] <- "Etarget"
colnames(x)[ncol(x)-2] <- "Cttarget"
colnames(x)[ncol(x)-1] <- "Eref"
colnames(x)[ncol(x)] <- "Ctref"
x <- data.frame(x, wDCt = (log10(x$Etarget)*x$Cttarget)-(log10(x$Eref)*x$Ctref))
} else if(NumberOfrefGenes == 2) {
factors <- colnames(x)[1:(ncol(x)-7)]
CRDfactors <- paste(factors, collapse = "*")
colnames(x)[ncol(x)-6] <- "rep"
colnames(x)[ncol(x)-5] <- "Etarget"
colnames(x)[ncol(x)-4] <- "Cttarget"
colnames(x)[ncol(x)-3] <- "Eref"
colnames(x)[ncol(x)-2] <- "Ctref"
colnames(x)[ncol(x)-1] <- "Eref2"
colnames(x)[ncol(x)] <- "Ctref2"
x <- data.frame(x[1:(ncol(x)-2)], wDCt = (log10(x$Etarget)*x$Cttarget)-
((log10(x$Eref)*x$Ctref) + (log10(x$Eref2)*x$Ctref2))/2)
}
} else {    # if there is Block
if(NumberOfrefGenes == 1) {
factors <- colnames(x)[1:(ncol(x)-6)]
CRDfactors <- paste(factors, collapse = "*")
colnames(x)[ncol(x)-5] <- "block"
colnames(x)[ncol(x)-4] <- "rep"
colnames(x)[ncol(x)-3] <- "Etarget"
colnames(x)[ncol(x)-2] <- "Cttarget"
colnames(x)[ncol(x)-1] <- "Eref"
colnames(x)[ncol(x)] <- "Ctref"
x <- data.frame(x, wDCt = (log10(x$Etarget)*x$Cttarget)-(log10(x$Eref)*x$Ctref))
} else if(NumberOfrefGenes == 2) {
factors <- colnames(x)[1:(ncol(x)-8)]
CRDfactors <- paste(factors, collapse = "*")
colnames(x)[ncol(x)-7] <- "block"
colnames(x)[ncol(x)-6] <- "rep"
colnames(x)[ncol(x)-5] <- "Etarget"
colnames(x)[ncol(x)-4] <- "Cttarget"
colnames(x)[ncol(x)-3] <- "Eref"
colnames(x)[ncol(x)-2] <- "Ctref"
colnames(x)[ncol(x)-1] <- "Eref2"
colnames(x)[ncol(x)] <- "Ctref2"
x <- data.frame(x[1:(ncol(x)-2)], wDCt = (log10(x$Etarget)*x$Cttarget)-
((log10(x$Eref)*x$Ctref) + (log10(x$Eref2)*x$Ctref2))/2)
}
}
# Check if there is block
if (is.null(Block)) {
# If ANOVA based on factorial design was desired:
lm0 <- stats::lm(stats::as.formula(paste("wDCt ~", CRDfactors)), x)
factorialANOVA <- stats::anova(lm0)
# Concatenate the columns using paste0
x$T <- do.call(paste, c(x[1:(ncol(x)-6)], sep = ":"))
x
lm <- stats::lm(wDCt ~ T, x)
anovaCRD <- stats::anova(lm)
} else {
# If ANOVA based on factorial design was desired with blocking factor:
lm0 <- stats::lm(stats::as.formula(paste("wDCt ~",  "+ block", CRDfactors)), x)
factorialANOVA <- stats::anova(lm0)
# Concatenate the columns using paste0
x$T <- do.call(paste, c(x[1:(ncol(x)-7)], sep = ":"))
x
lm <- stats::lm(wDCt ~ block + T, x)
anovaCRD <- stats::anova(lm)
}
# Reverse ordering of the grouping letters
invOrder <- function(invg){
collapsed <- paste(invg,sep="", collapse = "")
u <- unique(strsplit(collapsed, "")[[1]])
if(length(u) < 2){
return( invg)
}
u <- u[order(u)]
m <- matrix(nrow = NROW(invg), ncol=length(u))
m[] <-F
for(i in 1:length( invg)){
s <- strsplit( invg[i],"")[[1]]
index <- match(s, u)
m[i, index] <- T
}
for(i in 1:(length(u) - 1)){
firstColT <- match(T, m[, i])[1]
firstT <- match(T, rowSums(m[, i:length(u)] > 0))[1]
if(firstT < firstColT){
colT <- match(T, m[firstT, i:length(u)])[1]
colT <- colT + i - 1
tmp <- m[, colT]
m[, colT] <- m[,i]
m[, i] <- tmp
}
}
res <- vector(mode = "character", length = length("trt"))
for(i in 1:length(invg)){
l <- u[m[i, ]]
res[i] <- paste(l, sep = "",collapse = "")
}
return(res)
}
# Preparing final result table including letter grouping of the means
g <- LSD.test(lm, "T", group = T, console = F, alpha = 0.05, p.adj = p.adj)$groups
g <- g[rev(rownames(g)),] #order the result the way you want
g$groups <- invOrder(as.character(g$groups))
mean <- LSD.test(lm, "T", group = T, console = F, alpha = 0.05, p.adj = p.adj)$means
# Comparing mean paors that also returns CI
# Preparing final result table including letter grouping of the means
meanPP <- LSD.test(lm, "T", group = F, console = F, alpha = 0.05, p.adj = p.adj)
meanPairs <- meanPP$comparison
ROWS <- rownames(meanPairs)
diffs <- meanPairs$difference
pval <- meanPairs$pvalue
signif <- meanPairs$signif.
ucl <- meanPairs$UCL
lcl <- meanPairs$LCL
Post_hoc_Testing <- data.frame(row.names = ROWS,
FC = round(10^(-diffs), 4),
pvalue = pval,
signif. = signif,
LCL = round(10^(-ucl), 4),
UCL = round(10^(-lcl), 4))
RowNames <- rownames(mean)
mean$RowNames <- RowNames
mean <- separate(mean, RowNames, into = factors, sep = ":", remove = T)
mean <- mean[order(rownames(mean)),]
g <- g[order(rownames(g)),]
bwDCt <- 10^(-x$wDCt)
sdRow <- summarise(
group_by(data.frame(T = x$T, bwDCt = bwDCt), T),
sd = sd(bwDCt, na.rm = TRUE))
sd <- sdRow[order(sdRow$T),]
Results <- data.frame(mean[,(ncol(mean)-2):ncol(mean)],
RE = round(10^(-mean$wDCt), 4),
LCL = round(10^(-mean$LCL), 4),
UCL = round(10^(-mean$UCL), 4),
letters = g$groups,
std = round(sd$sd, 4))
# removing additional columns!
if(length(factors) == 1) {
Results <- Results[, -(1:2)]
} else if(length(factors) == 2) {
Results <- Results[, -1]
} else if(length(factors) == 3) {
Results <- Results
}
xx <- x[, -(ncol(x))] # Removing the last column of T
outlist <- list(Final_data = xx,
lmCRD = lm,
ANOVA_factorial = factorialANOVA,
ANOVA_CRD = anovaCRD,
Result = Results,
Post_hoc_Test = Post_hoc_Testing)
return(outlist)
}
qpcrANOVA(x, Block = "Block")
qpcrANOVA(x, Block = Block)
x <- read.table(text = "
Genotype	Drought	Block	Rep	EPO	POCt	EGAPDH	GAPDHCt
R	0	1	1	2	33.3	2	31.53
R	0	1	2	2	33.39	2	31.57
R	0	1	3	2	33.34	2	31.5
R	0.25	1	1	2	32.73	2	31.3
R	0.25	1	2	2	32.46	2	32.55
R	0.25	1	3	2	32.6	2	31.92
R	0.5	1	1	2	33.48	2	33.3
R	0.5	1	2	2	33.27	2	33.37
R	0.5	1	3	2	33.32	2	33.35
S	0	1	1	2	26.85	2	26.94
S	0	1	2	2	28.17	2	27.69
S	0	1	3	2	27.99	2	27.39
S	0.25	1	1	2	30.41	2	28.7
S	0.25	1	2	2	29.49	2	28.66
S	0.25	1	3	2	29.98	2	28.71
S	0.5	1	1	2	29.03	2	30.61
S	0.5	1	2	2	28.73	2	30.2
S	0.5	1	3	2	28.83	2	30.49
R	0	2	1	2	33.3	2	31.53
R	0	2	2	2	33.39	2	31.57
R	0	2	3	2	33.34	2	31.5
R	0.25	2	1	2	32.73	2	31.3
R	0.25	2	2	2	32.46	2	32.55
R	0.25	2	3	2	32.6	2	31.92
R	0.5	2	1	2	33.48	2	33.3
R	0.5	2	2	2	33.27	2	33.37
R	0.5	2	3	2	33.32	2	33.35
S	0	2	1	2	26.85	2	26.94
S	0	2	2	2	28.17	2	27.69
S	0	2	3	2	27.99	2	27.39
S	0.25	2	1	2	30.41	2	28.7
S	0.25	2	2	2	29.49	2	28.66
S	0.25	2	3	2	29.98	2	28.71
S	0.5	2	1	2	29.03	2	30.61
S	0.5	2	2	2	28.73	2	30.2
S	0.5	2	3	2	28.83	2	30.49
", header = TRUE, check.names = FALSE)
qpcrANOVA(x, Block = "Block")
qpcrANOVA <- function(x,
NumberOfrefGenes = 1,
Block = NULL,
p.adj = c("none","holm","hommel", "hochberg", "bonferroni", "BH", "BY", "fdr")){
# Check if there is block
if (is.null(Block)) {
if(NumberOfrefGenes == 1) {
factors <- colnames(x)[1:(ncol(x)-5)]
CRDfactors <- paste(factors, collapse = "*")
colnames(x)[ncol(x)-4] <- "rep"
colnames(x)[ncol(x)-3] <- "Etarget"
colnames(x)[ncol(x)-2] <- "Cttarget"
colnames(x)[ncol(x)-1] <- "Eref"
colnames(x)[ncol(x)] <- "Ctref"
x <- data.frame(x, wDCt = (log10(x$Etarget)*x$Cttarget)-(log10(x$Eref)*x$Ctref))
} else if(NumberOfrefGenes == 2) {
factors <- colnames(x)[1:(ncol(x)-7)]
CRDfactors <- paste(factors, collapse = "*")
colnames(x)[ncol(x)-6] <- "rep"
colnames(x)[ncol(x)-5] <- "Etarget"
colnames(x)[ncol(x)-4] <- "Cttarget"
colnames(x)[ncol(x)-3] <- "Eref"
colnames(x)[ncol(x)-2] <- "Ctref"
colnames(x)[ncol(x)-1] <- "Eref2"
colnames(x)[ncol(x)] <- "Ctref2"
x <- data.frame(x[1:(ncol(x)-2)], wDCt = (log10(x$Etarget)*x$Cttarget)-
((log10(x$Eref)*x$Ctref) + (log10(x$Eref2)*x$Ctref2))/2)
}
} else {    # if there is Block
if(NumberOfrefGenes == 1) {
factors <- colnames(x)[1:(ncol(x)-6)]
CRDfactors <- paste(factors, collapse = "*")
colnames(x)[ncol(x)-5] <- "block"
colnames(x)[ncol(x)-4] <- "rep"
colnames(x)[ncol(x)-3] <- "Etarget"
colnames(x)[ncol(x)-2] <- "Cttarget"
colnames(x)[ncol(x)-1] <- "Eref"
colnames(x)[ncol(x)] <- "Ctref"
x <- data.frame(x, wDCt = (log10(x$Etarget)*x$Cttarget)-(log10(x$Eref)*x$Ctref))
} else if(NumberOfrefGenes == 2) {
factors <- colnames(x)[1:(ncol(x)-8)]
CRDfactors <- paste(factors, collapse = "*")
colnames(x)[ncol(x)-7] <- "block"
colnames(x)[ncol(x)-6] <- "rep"
colnames(x)[ncol(x)-5] <- "Etarget"
colnames(x)[ncol(x)-4] <- "Cttarget"
colnames(x)[ncol(x)-3] <- "Eref"
colnames(x)[ncol(x)-2] <- "Ctref"
colnames(x)[ncol(x)-1] <- "Eref2"
colnames(x)[ncol(x)] <- "Ctref2"
x <- data.frame(x[1:(ncol(x)-2)], wDCt = (log10(x$Etarget)*x$Cttarget)-
((log10(x$Eref)*x$Ctref) + (log10(x$Eref2)*x$Ctref2))/2)
}
}
# Check if there is block
if (is.null(Block)) {
# If ANOVA based on factorial design was desired:
lm0 <- stats::lm(stats::as.formula(paste("wDCt ~", CRDfactors)), x)
factorialANOVA <- stats::anova(lm0)
# Concatenate the columns using paste0
x$T <- do.call(paste, c(x[1:(ncol(x)-6)], sep = ":"))
x
lm <- stats::lm(wDCt ~ T, x)
anovaCRD <- stats::anova(lm)
} else {
# If ANOVA based on factorial design was desired with blocking factor:
lm0 <- stats::lm(stats::as.formula(paste("wDCt ~",  "block +", CRDfactors)), x)
factorialANOVA <- stats::anova(lm0)
# Concatenate the columns using paste0
x$T <- do.call(paste, c(x[1:(ncol(x)-7)], sep = ":"))
x
lm <- stats::lm(wDCt ~ block + T, x)
anovaCRD <- stats::anova(lm)
}
# Reverse ordering of the grouping letters
invOrder <- function(invg){
collapsed <- paste(invg,sep="", collapse = "")
u <- unique(strsplit(collapsed, "")[[1]])
if(length(u) < 2){
return( invg)
}
u <- u[order(u)]
m <- matrix(nrow = NROW(invg), ncol=length(u))
m[] <-F
for(i in 1:length( invg)){
s <- strsplit( invg[i],"")[[1]]
index <- match(s, u)
m[i, index] <- T
}
for(i in 1:(length(u) - 1)){
firstColT <- match(T, m[, i])[1]
firstT <- match(T, rowSums(m[, i:length(u)] > 0))[1]
if(firstT < firstColT){
colT <- match(T, m[firstT, i:length(u)])[1]
colT <- colT + i - 1
tmp <- m[, colT]
m[, colT] <- m[,i]
m[, i] <- tmp
}
}
res <- vector(mode = "character", length = length("trt"))
for(i in 1:length(invg)){
l <- u[m[i, ]]
res[i] <- paste(l, sep = "",collapse = "")
}
return(res)
}
# Preparing final result table including letter grouping of the means
g <- LSD.test(lm, "T", group = T, console = F, alpha = 0.05, p.adj = p.adj)$groups
g <- g[rev(rownames(g)),] #order the result the way you want
g$groups <- invOrder(as.character(g$groups))
mean <- LSD.test(lm, "T", group = T, console = F, alpha = 0.05, p.adj = p.adj)$means
# Comparing mean paors that also returns CI
# Preparing final result table including letter grouping of the means
meanPP <- LSD.test(lm, "T", group = F, console = F, alpha = 0.05, p.adj = p.adj)
meanPairs <- meanPP$comparison
ROWS <- rownames(meanPairs)
diffs <- meanPairs$difference
pval <- meanPairs$pvalue
signif <- meanPairs$signif.
ucl <- meanPairs$UCL
lcl <- meanPairs$LCL
Post_hoc_Testing <- data.frame(row.names = ROWS,
FC = round(10^(-diffs), 4),
pvalue = pval,
signif. = signif,
LCL = round(10^(-ucl), 4),
UCL = round(10^(-lcl), 4))
RowNames <- rownames(mean)
mean$RowNames <- RowNames
mean <- separate(mean, RowNames, into = factors, sep = ":", remove = T)
mean <- mean[order(rownames(mean)),]
g <- g[order(rownames(g)),]
bwDCt <- 10^(-x$wDCt)
sdRow <- summarise(
group_by(data.frame(T = x$T, bwDCt = bwDCt), T),
sd = sd(bwDCt, na.rm = TRUE))
sd <- sdRow[order(sdRow$T),]
Results <- data.frame(mean[,(ncol(mean)-2):ncol(mean)],
RE = round(10^(-mean$wDCt), 4),
LCL = round(10^(-mean$LCL), 4),
UCL = round(10^(-mean$UCL), 4),
letters = g$groups,
std = round(sd$sd, 4))
# removing additional columns!
if(length(factors) == 1) {
Results <- Results[, -(1:2)]
} else if(length(factors) == 2) {
Results <- Results[, -1]
} else if(length(factors) == 3) {
Results <- Results
}
xx <- x[, -(ncol(x))] # Removing the last column of T
outlist <- list(Final_data = xx,
lmCRD = lm,
ANOVA_factorial = factorialANOVA,
ANOVA_CRD = anovaCRD,
Result = Results,
Post_hoc_Test = Post_hoc_Testing)
return(outlist)
}
qpcrANOVA(x, Block = "Block")
library(tidyr)
qpcrANOVA(x, Block = "Block")
library(dplyr)
qpcrANOVA(x, Block = "Block")
qpcrANOVA(x, Block = "Block")
library(devtools)
document()
document()
check()
build()
remove.packages("iqpcr")
install.packages("E:/Dropbox/iqpcr/iqpcr_1.0.0.tar.gz", repos = NULL, type = "source")
install.packages("E:/Dropbox/iqpcr/iqpcr_1.0.0.tar.gz", repos = NULL, type = "source")
library(iqpcr)
library(devtools)
document()
use_data(data_withTechRep)
use_data(data_withTechRep, overwrite = T)
setwd("E:/Dropbox/iqpcr/")
check()
setwd("E:/Dropbox/iqpcr/iqpcr/")
check()
setwd("E:/Dropbox/iqpcr/")
setwd("E:/Dropbox/iqpcr/iqpcr/")
build()
setwd("E:/Dropbox/iqpcr/")
submit_cran("iqpcr")
library(iqpcr)
library(iqpcr)
blk <- read.table(text = "
Genotype	Drought	Block	Rep	EPO	POCt	EGAPDH	GAPDHCt
R	0	1	1	2	33.3	2	31.53
R	0	1	2	2	33.39	2	31.57
R	0	2	3	2	33.34	2	31.5
R	0.25	1	1	2	32.73	2	31.3
R	0.25	1	2	2	32.46	2	32.55
R	0.25	2	3	2	32.6	2	31.92
R	0.5	1	1	2	33.48	2	33.3
R	0.5	1	2	2	33.27	2	33.37
R	0.5	2	3	2	33.32	2	33.35
S	0	1	1	2	26.85	2	26.94
S	0	1	2	2	28.17	2	27.69
S	0	2	3	2	27.99	2	27.39
S	0.25	1	1	2	30.41	2	28.7
S	0.25	1	2	2	29.49	2	28.66
S	0.25	2	3	2	29.98	2	28.71
S	0.5	1	1	2	29.03	2	30.61
S	0.5	1	2	2	28.73	2	30.2
S	0.5	2	3	2	28.83	2	30.49
R	0	1	1	2	33.3	2	31.53
R	0	1	2	2	33.39	2	31.57
R	0	2	3	2	33.34	2	31.5
R	0.25	1	1	2	32.73	2	31.3
R	0.25	1	2	2	32.46	2	32.55
R	0.25	2	3	2	32.6	2	31.92
R	0.5	1	1	2	33.48	2	33.3
R	0.5	1	2	2	33.27	2	33.37
R	0.5	2	3	2	33.32	2	33.35
S	0	1	1	2	26.85	2	26.94
S	0	1	2	2	28.17	2	27.69
S	0	2	3	2	27.99	2	27.39
S	0.25	1	1	2	30.41	2	28.7
S	0.25	1	2	2	29.49	2	28.66
S	0.25	2	3	2	29.98	2	28.71
S	0.5	1	1	2	29.03	2	30.61
S	0.5	1	2	2	28.73	2	30.2
S	0.5	2	3	2	28.83	2	30.49
", header = TRUE, check.names = FALSE)
qpcrANOVA(blk)
qpcrANOVA(blk, Block = "Block")
qpcrANOVA(blk, Block = "Block", NumberOfrefGenes = 1)
library(devtools)
setwd("E:/Dropbox/iqpcr/iqpcr/")
doc
document()
use_data(data_2factorBlock)
use_data(R/data_2factorBlock)
use_data("data_2factorBlock")
use_data(data_2factorBlock)
setwd("E:/Dropbox/iqpcr/iqpcr/R")
use_data(data_2factorBlock)
use_data(data_2factorBlock.r)
use_data("data_2factorBlock")
?use_data
use_data(data_2factorBlock)
library(devtools)
document()
use_data(data_2factorBlock)
use_data("data_2factorBlock")
use_data("data_2factorBlock.r")
use_data(data_2factorBlock)
use_data(data_2factorBlock, overwrite = T)
use_data(data_2factorBlock, overwrite = T, internal = T)
