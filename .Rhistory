legend.position = c(0.09, 0.8),
fontsize = 12){
wDCt <- x$wDCt
std <- x$std
LCL <- x$LCL
UCL <- x$UCL
qq1 <- ggplot(x, aes(factor({{x.axis.factor}}, levels = as.character(unique({{x.axis.factor}}))),
y = wDCt, group = {{ group.factor }}, fill = {{ group.factor }})) +
geom_col(color = "black", position = "dodge", width = width) +
scale_fill_brewer(palette = fill) +
geom_hline(aes(yintercept = 1), col = "red", linetype = 2, show.legend = FALSE) +
geom_errorbar(aes(ymin = wDCt, ymax = wDCt + std), width = 0.2, position = position_dodge(width = 0.5)) +
ylab(ylab) +
xlab(xlab) +
theme_bw() +
theme(axis.text.x = element_text(size = fontsize, color = "black", angle = 0, hjust = 0.5),
axis.text.y = element_text(size = fontsize, color = "black", angle = 0, hjust = 0.5),
axis.title  = element_text(size = fontsize),
legend.text = element_text(size = fontsize)) +
scale_y_continuous(breaks = seq(0, max(wDCt) + max(std) + y.axis.adjust, by = y.axis.by),
limits = c(0, max(wDCt) + max(std) + y.axis.adjust), expand = c(0, 0)) +
theme(legend.position  = legend.position) +
theme(legend.title = element_text(size = fontsize, color = "black"))
if (show.letters) {
qq1 <-qq1 +
geom_text(data = x, aes(label = letters, x = {{ x.axis.factor }}, y = wDCt + std + letter.position.adjust),
vjust = -0.5, size = 4, position = position_dodge(width = 0.5))
}
qq2 <- ggplot(x, aes(factor({{x.axis.factor}}, levels = as.character(unique({{x.axis.factor}}))),
y = wDCt, group = {{ group.factor }}, fill = {{ group.factor }})) +
geom_col(color = "black", position = "dodge", width = width) +
scale_fill_brewer(palette = fill) +
geom_hline(aes(yintercept = 1), col = "red", linetype = 2, show.legend = FALSE) +
geom_errorbar(aes(ymin = wDCt - UCL, ymax = wDCt + LCL), width = 0.2, position = position_dodge(width = 0.5)) +
ylab(ylab) +
xlab(xlab) +
theme_bw() +
theme(axis.text.x = element_text(size = fontsize, color = "black", angle = 0, hjust = 0.5),
axis.text.y = element_text(size = fontsize, color = "black", angle = 0, hjust = 0.5),
axis.title  = element_text(size = fontsize),
legend.text = element_text(size = fontsize)) +
scale_y_continuous(breaks = seq(0, max(wDCt) + max(LCL) + y.axis.adjust, by = y.axis.by),
limits = c(0, max(wDCt) + max(LCL) + y.axis.adjust), expand = c(0, 0)) +
theme(legend.position  = legend.position) +
theme(legend.title = element_text(size = fontsize, color = "black"))
if (show.letters) {
qq2 <- qq2 +
geom_text(data = x, aes(label = letters, x = {{ x.axis.factor }}, y = wDCt + LCL + letter.position.adjust),
vjust = -0.5, size = 4, position = position_dodge(width = 0.5))
}
if(errorbar == "std") {
print(qq1)
} else if(errorbar == "ci") {
print(qq2)
}
}
twoFACTORplot(ss,
x.axis.factor = Drought,
group.factor = Genotype,
width = 0.5,
fill = "Greens",
y.axis.adjust = 0.5,
y.axis.by = 2,
ylab = "Relative Expression",
xlab = "Drought Levels",
show.letters = TRUE,
letter.position.adjust = 0.3,
legend.position = c(0.09, 0.8))
twoFACTORplot(ss,
x.axis.factor = Drought,
group.factor = Genotype,
width = 0.5,
fill = "Greens",
y.axis.adjust = 0.5,
y.axis.by = 2,
ylab = "Relative Expression",
xlab = "Drought Levels",
show.letters = TRUE,
letter.position.adjust = 0.3,
legend.position = c(0.09, 0.8))
s <- qpcrANOVA(data_2factor)
s$Post_hoc_Test
ss <- ss$Result
za <- function(x,
x.axis.factor,
group.factor,
width = 0.5,
fill = "Blues",
y.axis.adjust = 0.5,
y.axis.by = 2,
errorbar = "std",
show.letters = TRUE,
letter.position.adjust = 0.1,
ylab = "Relative Expression",
xlab = "Gene",
legend.position = c(0.09, 0.8),
fontsize = 12){
wDCt <- x$wDCt
std <- x$std
LCL <- x$LCL
UCL <- x$UCL
qq1 <- ggplot(x, aes(factor({{x.axis.factor}}, levels = as.character(unique({{x.axis.factor}}))),
y = wDCt, group = {{ group.factor }}, fill = {{ group.factor }})) +
geom_col(color = "black", position = "dodge", width = width) +
scale_fill_brewer(palette = fill) +
geom_hline(aes(yintercept = 1), col = "red", linetype = 2, show.legend = FALSE) +
geom_errorbar(aes(ymin = wDCt, ymax = wDCt + std), width = 0.2, position = position_dodge(width = 0.5)) +
ylab(ylab) +
xlab(xlab) +
theme_bw() +
theme(axis.text.x = element_text(size = fontsize, color = "black", angle = 0, hjust = 0.5),
axis.text.y = element_text(size = fontsize, color = "black", angle = 0, hjust = 0.5),
axis.title  = element_text(size = fontsize),
legend.text = element_text(size = fontsize)) +
scale_y_continuous(breaks = seq(0, max(wDCt) + max(std) + y.axis.adjust, by = y.axis.by),
limits = c(0, max(wDCt) + max(std) + y.axis.adjust), expand = c(0, 0)) +
theme(legend.position  = legend.position) +
theme(legend.title = element_text(size = fontsize, color = "black"))
if (show.letters) {
qq1 <-qq1 +
geom_text(data = x, aes(label = letters, x = {{ x.axis.factor }}, y = wDCt + std + letter.position.adjust),
vjust = -0.5, size = 4, position = position_dodge(width = 0.5))
}
qq2 <- ggplot(x, aes(factor({{x.axis.factor}}, levels = as.character(unique({{x.axis.factor}}))),
y = wDCt, group = {{ group.factor }}, fill = {{ group.factor }})) +
geom_col(color = "black", position = "dodge", width = width) +
scale_fill_brewer(palette = fill) +
geom_hline(aes(yintercept = 1), col = "red", linetype = 2, show.legend = FALSE) +
geom_errorbar(aes(ymin = wDCt - UCL, ymax = wDCt + LCL), width = 0.2, position = position_dodge(width = 0.5)) +
ylab(ylab) +
xlab(xlab) +
theme_bw() +
theme(axis.text.x = element_text(size = fontsize, color = "black", angle = 0, hjust = 0.5),
axis.text.y = element_text(size = fontsize, color = "black", angle = 0, hjust = 0.5),
axis.title  = element_text(size = fontsize),
legend.text = element_text(size = fontsize)) +
scale_y_continuous(breaks = seq(0, max(wDCt) + max(LCL) + y.axis.adjust, by = y.axis.by),
limits = c(0, max(wDCt) + max(LCL) + y.axis.adjust), expand = c(0, 0)) +
theme(legend.position  = legend.position) +
theme(legend.title = element_text(size = fontsize, color = "black"))
if (show.letters) {
qq2 <- qq2 +
geom_text(data = x, aes(label = letters, x = {{ x.axis.factor }}, y = wDCt + LCL + letter.position.adjust),
vjust = -0.5, size = 4, position = position_dodge(width = 0.5))
}
if(errorbar == "std") {
print(qq1)
} else if(errorbar == "ci") {
print(qq2)
}
}
twoFACTORplot(ss,
x.axis.factor = Drought,
group.factor = Genotype,
width = 0.5,
fill = "Greens",
y.axis.adjust = 0.5,
y.axis.by = 2,
ylab = "Relative Expression",
xlab = "Drought Levels",
show.letters = TRUE,
letter.position.adjust = 0.3,
legend.position = c(0.09, 0.8))
twoFACTORplot(ss,
x.axis.factor = Drought,
group.factor = Genotype,
width = 0.5,
fill = "Greens",
y.axis.adjust = 5,
y.axis.by = 2,
ylab = "Relative Expression",
xlab = "Drought Levels",
show.letters = TRUE,
letter.position.adjust = 0.3,
legend.position = c(0.09, 0.8))
za <- function(x,
x.axis.factor,
group.factor,
width = 0.5,
fill = "Blues",
y.axis.adjust = 0.5,
y.axis.by = 2,
errorbar = "std",
show.letters = TRUE,
letter.position.adjust = 0.1,
ylab = "Relative Expression",
xlab = "Gene",
legend.position = c(0.09, 0.8),
fontsize = 12){
wDCt <- x$wDCt
std <- x$std
LCL <- x$LCL
UCL <- x$UCL
qq1 <- ggplot(x, aes(factor({{x.axis.factor}}, levels = as.character(unique({{x.axis.factor}}))),
y = wDCt, group = {{ group.factor }}, fill = {{ group.factor }})) +
geom_col(color = "black", position = "dodge", width = width) +
scale_fill_brewer(palette = fill) +
geom_hline(aes(yintercept = 1), col = "red", linetype = 2, show.legend = FALSE) +
geom_errorbar(aes(ymin = wDCt, ymax = wDCt + std), width = 0.2, position = position_dodge(width = 0.5)) +
ylab(ylab) +
xlab(xlab) +
theme_bw() +
theme(axis.text.x = element_text(size = fontsize, color = "black", angle = 0, hjust = 0.5),
axis.text.y = element_text(size = fontsize, color = "black", angle = 0, hjust = 0.5),
axis.title  = element_text(size = fontsize),
legend.text = element_text(size = fontsize)) +
scale_y_continuous(breaks = seq(0, max(wDCt) + max(std) + y.axis.adjust, by = y.axis.by),
limits = c(0, max(wDCt) + max(std) + y.axis.adjust), expand = c(0, 0)) +
theme(legend.position  = legend.position) +
theme(legend.title = element_text(size = fontsize, color = "black"))
if (show.letters) {
qq1 <-qq1 +
geom_text(data = x, aes(label = letters, x = {{ x.axis.factor }}, y = wDCt + std + letter.position.adjust),
vjust = -0.5, size = 4, position = position_dodge(width = 0.5))
}
qq2 <- ggplot(x, aes(factor({{x.axis.factor}}, levels = as.character(unique({{x.axis.factor}}))),
y = wDCt, group = {{ group.factor }}, fill = {{ group.factor }})) +
geom_col(color = "black", position = "dodge", width = width) +
scale_fill_brewer(palette = fill) +
geom_hline(aes(yintercept = 1), col = "red", linetype = 2, show.legend = FALSE) +
geom_errorbar(aes(ymin = wDCt - UCL, ymax = wDCt + LCL), width = 0.2, position = position_dodge(width = 0.5)) +
ylab(ylab) +
xlab(xlab) +
theme_bw() +
theme(axis.text.x = element_text(size = fontsize, color = "black", angle = 0, hjust = 0.5),
axis.text.y = element_text(size = fontsize, color = "black", angle = 0, hjust = 0.5),
axis.title  = element_text(size = fontsize),
legend.text = element_text(size = fontsize)) +
scale_y_continuous(breaks = seq(0, max(wDCt) + 4 + y.axis.adjust, by = y.axis.by),
limits = c(0, max(wDCt) + 4 + y.axis.adjust), expand = c(0, 0)) +
theme(legend.position  = legend.position) +
theme(legend.title = element_text(size = fontsize, color = "black"))
if (show.letters) {
qq2 <- qq2 +
geom_text(data = x, aes(label = letters, x = {{ x.axis.factor }}, y = wDCt + LCL + letter.position.adjust),
vjust = -0.5, size = 4, position = position_dodge(width = 0.5))
}
if(errorbar == "std") {
print(qq1)
} else if(errorbar == "ci") {
print(qq2)
}
}
twoFACTORplot(ss,
x.axis.factor = Drought,
group.factor = Genotype,
width = 0.5,
fill = "Greens",
y.axis.adjust = 5,
y.axis.by = 2,
ylab = "Relative Expression",
xlab = "Drought Levels",
show.letters = TRUE,
letter.position.adjust = 0.3,
legend.position = c(0.09, 0.8))
ss
s <- qpcrANOVA(data_2factor)
s <- qpcrANOVA(data_2factor)
s$Post_hoc_Test
ss <- ss$Result
za <- function(x,
x.axis.factor,
group.factor,
width = 0.5,
fill = "Blues",
y.axis.adjust = 0.5,
y.axis.by = 2,
errorbar = "std",
show.letters = TRUE,
letter.position.adjust = 0.1,
ylab = "Relative Expression",
xlab = "Gene",
legend.position = c(0.09, 0.8),
fontsize = 12){
wDCt <- x$wDCt
std <- x$std
LCL <- x$LCL
UCL <- x$UCL
qq1 <- ggplot(x, aes(factor({{x.axis.factor}}, levels = as.character(unique({{x.axis.factor}}))),
y = wDCt, group = {{ group.factor }}, fill = {{ group.factor }})) +
geom_col(color = "black", position = "dodge", width = width) +
scale_fill_brewer(palette = fill) +
geom_hline(aes(yintercept = 1), col = "red", linetype = 2, show.legend = FALSE) +
geom_errorbar(aes(ymin = wDCt, ymax = wDCt + std), width = 0.2, position = position_dodge(width = 0.5)) +
ylab(ylab) +
xlab(xlab) +
theme_bw() +
theme(axis.text.x = element_text(size = fontsize, color = "black", angle = 0, hjust = 0.5),
axis.text.y = element_text(size = fontsize, color = "black", angle = 0, hjust = 0.5),
axis.title  = element_text(size = fontsize),
legend.text = element_text(size = fontsize)) +
scale_y_continuous(breaks = seq(0, max(wDCt) + max(std) + y.axis.adjust, by = y.axis.by),
limits = c(0, max(wDCt) + max(std) + y.axis.adjust), expand = c(0, 0)) +
theme(legend.position  = legend.position) +
theme(legend.title = element_text(size = fontsize, color = "black"))
if (show.letters) {
qq1 <-qq1 +
geom_text(data = x, aes(label = letters, x = {{ x.axis.factor }}, y = wDCt + std + letter.position.adjust),
vjust = -0.5, size = 4, position = position_dodge(width = 0.5))
}
qq2 <- ggplot(x, aes(factor({{x.axis.factor}}, levels = as.character(unique({{x.axis.factor}}))),
y = wDCt, group = {{ group.factor }}, fill = {{ group.factor }})) +
geom_col(color = "black", position = "dodge", width = width) +
scale_fill_brewer(palette = fill) +
geom_hline(aes(yintercept = 1), col = "red", linetype = 2, show.legend = FALSE) +
geom_errorbar(aes(ymin = wDCt - UCL, ymax = wDCt + LCL), width = 0.2, position = position_dodge(width = 0.5)) +
ylab(ylab) +
xlab(xlab) +
theme_bw() +
theme(axis.text.x = element_text(size = fontsize, color = "black", angle = 0, hjust = 0.5),
axis.text.y = element_text(size = fontsize, color = "black", angle = 0, hjust = 0.5),
axis.title  = element_text(size = fontsize),
legend.text = element_text(size = fontsize)) +
scale_y_continuous(breaks = seq(0, max(wDCt) + max(LCL) + y.axis.adjust, by = y.axis.by),
limits = c(0, max(wDCt) + max(LCL) + y.axis.adjust), expand = c(0, 0)) +
theme(legend.position  = legend.position) +
theme(legend.title = element_text(size = fontsize, color = "black"))
if (show.letters) {
qq2 <- qq2 +
geom_text(data = x, aes(label = letters, x = {{ x.axis.factor }}, y = wDCt + LCL + letter.position.adjust),
vjust = -0.5, size = 4, position = position_dodge(width = 0.5))
}
if(errorbar == "std") {
print(qq1)
} else if(errorbar == "ci") {
print(qq2)
}
}
twoFACTORplot(ss,
x.axis.factor = Drought,
group.factor = Genotype,
width = 0.5,
fill = "Greens",
y.axis.adjust = 5,
y.axis.by = 2,
ylab = "Relative Expression",
xlab = "Drought Levels",
show.letters = TRUE,
letter.position.adjust = 0.3,
legend.position = c(0.09, 0.8))
ss
s <- qpcrANOVA(data_2factor)
ss <- s$Result
ss
twoFACTORplot(ss,
x.axis.factor = Drought,
group.factor = Genotype,
width = 0.5,
fill = "Greens",
y.axis.adjust = 5,
y.axis.by = 2,
ylab = "Relative Expression",
xlab = "Drought Levels",
show.letters = TRUE,
letter.position.adjust = 0.3,
legend.position = c(0.09, 0.8))
twoFACTORplot(ss,
x.axis.factor = Drought,
group.factor = Genotype,
width = 0.5,
fill = "Greens",
y.axis.adjust = 5,
y.axis.by = 2,
ylab = "Relative Expression",
xlab = "Drought Levels",
show.letters = TRUE,
letter.position.adjust = 0.3,
legend.position = c(0.09, 0.8),
errorbar = "ci")
za <- function(x,
x.axis.factor,
group.factor,
width = 0.5,
fill = "Blues",
y.axis.adjust = 0.5,
y.axis.by = 2,
errorbar = "std",
show.letters = TRUE,
letter.position.adjust = 0.1,
ylab = "Relative Expression",
xlab = "Gene",
legend.position = c(0.09, 0.8),
fontsize = 12){
wDCt <- x$wDCt
std <- x$std
LCL <- x$LCL
UCL <- x$UCL
qq1 <- ggplot(x, aes(factor({{x.axis.factor}}, levels = as.character(unique({{x.axis.factor}}))),
y = wDCt, group = {{ group.factor }}, fill = {{ group.factor }})) +
geom_col(color = "black", position = "dodge", width = width) +
scale_fill_brewer(palette = fill) +
geom_hline(aes(yintercept = 1), col = "red", linetype = 2, show.legend = FALSE) +
geom_errorbar(aes(ymin = wDCt, ymax = wDCt + std), width = 0.2, position = position_dodge(width = 0.5)) +
ylab(ylab) +
xlab(xlab) +
theme_bw() +
theme(axis.text.x = element_text(size = fontsize, color = "black", angle = 0, hjust = 0.5),
axis.text.y = element_text(size = fontsize, color = "black", angle = 0, hjust = 0.5),
axis.title  = element_text(size = fontsize),
legend.text = element_text(size = fontsize)) +
scale_y_continuous(breaks = seq(0, max(wDCt) + max(std) + y.axis.adjust, by = y.axis.by),
limits = c(0, max(wDCt) + max(std) + y.axis.adjust), expand = c(0, 0)) +
theme(legend.position  = legend.position) +
theme(legend.title = element_text(size = fontsize, color = "black"))
if (show.letters) {
qq1 <-qq1 +
geom_text(data = x, aes(label = letters, x = {{ x.axis.factor }}, y = wDCt + std + letter.position.adjust),
vjust = -0.5, size = 4, position = position_dodge(width = 0.5))
}
qq2 <- ggplot(x, aes(factor({{x.axis.factor}}, levels = as.character(unique({{x.axis.factor}}))),
y = wDCt, group = {{ group.factor }}, fill = {{ group.factor }})) +
geom_col(color = "black", position = "dodge", width = width) +
scale_fill_brewer(palette = fill) +
geom_hline(aes(yintercept = 1), col = "red", linetype = 2, show.legend = FALSE) +
geom_errorbar(aes(ymin = wDCt - UCL, ymax = wDCt + LCL), width = 0.2, position = position_dodge(width = 0.5)) +
ylab(ylab) +
xlab(xlab) +
theme_bw() +
theme(axis.text.x = element_text(size = fontsize, color = "black", angle = 0, hjust = 0.5),
axis.text.y = element_text(size = fontsize, color = "black", angle = 0, hjust = 0.5),
axis.title  = element_text(size = fontsize),
legend.text = element_text(size = fontsize)) +
scale_y_continuous(breaks = seq(0, max(wDCt) + max(LCL) + y.axis.adjust, by = y.axis.by),
limits = c(0, max(wDCt) + max(LCL) + y.axis.adjust), expand = c(0, 0)) +
theme(legend.position  = legend.position) +
theme(legend.title = element_text(size = fontsize, color = "black"))
if (show.letters) {
qq2 <- qq2 +
geom_text(data = x, aes(label = letters, x = {{ x.axis.factor }}, y = wDCt + LCL + letter.position.adjust),
vjust = -0.5, size = 4, position = position_dodge(width = 0.5))
}
if(errorbar == "std") {
print(qq1)
} else if(errorbar == "ci") {
print(qq2)
}
}
za(ss,
x.axis.factor = Drought,
group.factor = Genotype,
width = 0.5,
fill = "Greens",
y.axis.adjust = 5,
y.axis.by = 2,
ylab = "Relative Expression",
xlab = "Drought Levels",
show.letters = TRUE,
letter.position.adjust = 0.3,
legend.position = c(0.09, 0.8),
errorbar = "ci")
za(ss,
x.axis.factor = Drought,
group.factor = Genotype,
width = 0.5,
fill = "Greens",
y.axis.adjust = 2,
y.axis.by = 2,
ylab = "Relative Expression",
xlab = "Drought Levels",
show.letters = TRUE,
letter.position.adjust = 0.3,
legend.position = c(0.09, 0.8),
errorbar = "ci")
za(ss,
x.axis.factor = Drought,
group.factor = Genotype,
width = 0.5,
fill = "Greens",
y.axis.adjust = 12,
y.axis.by = 2,
ylab = "Relative Expression",
xlab = "Drought Levels",
show.letters = TRUE,
letter.position.adjust = 0.3,
legend.position = c(0.09, 0.8),
errorbar = "ci")
za(ss,
x.axis.factor = Drought,
group.factor = Genotype,
width = 0.5,
fill = "Greens",
y.axis.adjust = 1,
y.axis.by = 2,
ylab = "Relative Expression",
xlab = "Drought Levels",
show.letters = TRUE,
letter.position.adjust = 0.3,
legend.position = c(0.09, 0.8),
errorbar = "ci")
library(devtools)
document()
check()
build()
remove.packages("iqpcr")
install.packages("E:/Dropbox/iqpcr/iqpcr_1.0.0.tar.gz", repos = NULL, type = "source")
library(iqpcr)
library(devtools)
install_github("mirzaghaderi/iqpcr")
git remote add origin https://github.com/mirzaghaderi/iqpcr
setwd("E:/Dropbox/iqpcr/iqpcr/")
library(devtools)
git init
library(usethis)
library(devtools)
readLines( "DESCRIPTION", warn=FALSE)
readLines( "DESCRIPTION", warn=FALSE)
env::status()
library(renv)
library(usethis)
library(renv)
remove.packages("renv")
renv::deactivate(clean = TRUE)
